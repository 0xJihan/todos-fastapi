<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/frontend/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/README.md" />
              <option name="updatedContent" value="# TodoApi Frontend&#10;&#10;This is a React + TypeScript frontend for your FastAPI TodoApi backend.&#10;&#10;## Getting Started&#10;&#10;1. Install dependencies:&#10;   ```bash&#10;   npm install&#10;   ```&#10;2. Start the development server:&#10;   ```bash&#10;   npm start&#10;   ```&#10;&#10;## Features&#10;- List all todos&#10;- Create a new todo&#10;- Update a todo&#10;- Delete a todo&#10;&#10;## Tech Stack&#10;- React&#10;- TypeScript&#10;- Material-UI&#10;- Axios&#10;&#10;## API Endpoint&#10;Make sure your FastAPI backend is running and accessible at the expected URL (e.g., http://localhost:8000).&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/index.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/index.html" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;  &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;  &lt;title&gt;Todo App&lt;/title&gt;&#10;  &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;&#10;  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css&quot;&gt;&#10;  &lt;style&gt;&#10;    body { background: #f8fafc; }&#10;    .todo-card { margin-bottom: 1rem; }&#10;    .completed { text-decoration: line-through; color: #aaa; }&#10;    .todo-actions button { margin-left: 0.5rem; }&#10;    .todo-list { min-height: 200px; }&#10;  &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;  &lt;div class=&quot;container py-5&quot;&gt;&#10;    &lt;div class=&quot;row justify-content-center&quot;&gt;&#10;      &lt;div class=&quot;col-md-7&quot;&gt;&#10;        &lt;div class=&quot;card shadow-lg&quot;&gt;&#10;          &lt;div class=&quot;card-body&quot;&gt;&#10;            &lt;h2 class=&quot;card-title text-center mb-4&quot;&gt;Todo List&lt;/h2&gt;&#10;            &lt;form id=&quot;todo-form&quot; class=&quot;row g-2 mb-4&quot;&gt;&#10;              &lt;div class=&quot;col-5&quot;&gt;&#10;                &lt;input type=&quot;text&quot; id=&quot;title&quot; class=&quot;form-control&quot; placeholder=&quot;Title&quot; required&gt;&#10;              &lt;/div&gt;&#10;              &lt;div class=&quot;col-5&quot;&gt;&#10;                &lt;input type=&quot;text&quot; id=&quot;description&quot; class=&quot;form-control&quot; placeholder=&quot;Description&quot;&gt;&#10;              &lt;/div&gt;&#10;              &lt;div class=&quot;col-2 d-grid&quot;&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;&lt;span id=&quot;form-btn-text&quot;&gt;Add&lt;/span&gt;&lt;/button&gt;&#10;              &lt;/div&gt;&#10;              &lt;input type=&quot;hidden&quot; id=&quot;todo-id&quot;&gt;&#10;            &lt;/form&gt;&#10;            &lt;ul class=&quot;list-group todo-list&quot; id=&quot;todo-list&quot;&gt;&lt;/ul&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  &lt;/div&gt;&#10;  &lt;script&gt;&#10;    const API_URL = 'http://localhost:8000/todos';&#10;    const todoList = document.getElementById('todo-list');&#10;    const todoForm = document.getElementById('todo-form');&#10;    const titleInput = document.getElementById('title');&#10;    const descInput = document.getElementById('description');&#10;    const todoIdInput = document.getElementById('todo-id');&#10;    const formBtnText = document.getElementById('form-btn-text');&#10;&#10;    async function fetchTodos() {&#10;      const res = await fetch(API_URL);&#10;      const todos = await res.json();&#10;      renderTodos(todos);&#10;    }&#10;&#10;    function renderTodos(todos) {&#10;      todoList.innerHTML = '';&#10;      if (todos.length === 0) {&#10;        todoList.innerHTML = '&lt;li class=&quot;list-group-item text-center text-muted&quot;&gt;No todos yet.&lt;/li&gt;';&#10;        return;&#10;      }&#10;      todos.forEach(todo =&gt; {&#10;        const li = document.createElement('li');&#10;        li.className = 'list-group-item d-flex align-items-center justify-content-between todo-card';&#10;        li.innerHTML = `&#10;          &lt;div&gt;&#10;            &lt;input type=&quot;checkbox&quot; class=&quot;form-check-input me-2&quot; ${todo.completed ? 'checked' : ''} data-id=&quot;${todo.id}&quot;&gt;&#10;            &lt;span class=&quot;${todo.completed ? 'completed' : ''}&quot;&gt;&lt;strong&gt;${todo.title}&lt;/strong&gt; &lt;small class=&quot;text-secondary&quot;&gt;${todo.description || ''}&lt;/small&gt;&lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div class=&quot;todo-actions&quot;&gt;&#10;            &lt;button class=&quot;btn btn-sm btn-outline-secondary edit-btn&quot; data-id=&quot;${todo.id}&quot;&gt;&lt;i class=&quot;fa fa-edit&quot;&gt;&lt;/i&gt;&lt;/button&gt;&#10;            &lt;button class=&quot;btn btn-sm btn-outline-danger delete-btn&quot; data-id=&quot;${todo.id}&quot;&gt;&lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt;&lt;/button&gt;&#10;          &lt;/div&gt;&#10;        `;&#10;        todoList.appendChild(li);&#10;      });&#10;    }&#10;&#10;    todoList.addEventListener('click', async (e) =&gt; {&#10;      if (e.target.closest('.delete-btn')) {&#10;        const id = e.target.closest('.delete-btn').dataset.id;&#10;        await fetch(`${API_URL}/${id}`, { method: 'DELETE' });&#10;        fetchTodos();&#10;      }&#10;      if (e.target.closest('.edit-btn')) {&#10;        const id = e.target.closest('.edit-btn').dataset.id;&#10;        const res = await fetch(`${API_URL}`);&#10;        const todos = await res.json();&#10;        const todo = todos.find(t =&gt; t.id == id);&#10;        if (todo) {&#10;          titleInput.value = todo.title;&#10;          descInput.value = todo.description || '';&#10;          todoIdInput.value = todo.id;&#10;          formBtnText.textContent = 'Update';&#10;        }&#10;      }&#10;      if (e.target.classList.contains('form-check-input')) {&#10;        const id = e.target.dataset.id;&#10;        const res = await fetch(`${API_URL}`);&#10;        const todos = await res.json();&#10;        const todo = todos.find(t =&gt; t.id == id);&#10;        if (todo) {&#10;          await fetch(`${API_URL}/${id}`, {&#10;            method: 'PUT',&#10;            headers: { 'Content-Type': 'application/json' },&#10;            body: JSON.stringify({&#10;              title: todo.title,&#10;              description: todo.description,&#10;              completed: !todo.completed&#10;            })&#10;          });&#10;          fetchTodos();&#10;        }&#10;      }&#10;    });&#10;&#10;    todoForm.addEventListener('submit', async (e) =&gt; {&#10;      e.preventDefault();&#10;      const id = todoIdInput.value;&#10;      const data = {&#10;        title: titleInput.value,&#10;        description: descInput.value,&#10;        completed: false&#10;      };&#10;      if (id) {&#10;        await fetch(`${API_URL}/${id}`, {&#10;          method: 'PUT',&#10;          headers: { 'Content-Type': 'application/json' },&#10;          body: JSON.stringify(data)&#10;        });&#10;      } else {&#10;        await fetch(API_URL, {&#10;          method: 'POST',&#10;          headers: { 'Content-Type': 'application/json' },&#10;          body: JSON.stringify(data)&#10;        });&#10;      }&#10;      todoForm.reset();&#10;      todoIdInput.value = '';&#10;      formBtnText.textContent = 'Add';&#10;      fetchTodos();&#10;    });&#10;&#10;    fetchTodos();&#10;  &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/App.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/App.tsx" />
              <option name="originalContent" value="import React from 'react';&#10;import logo from './logo.svg';&#10;import './App.css';&#10;&#10;function App() {&#10;  return (&#10;    &lt;div className=&quot;App&quot;&gt;&#10;      &lt;header className=&quot;App-header&quot;&gt;&#10;        &lt;img src={logo} className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;&#10;        &lt;p&gt;&#10;          Edit &lt;code&gt;src/App.tsx&lt;/code&gt; and save to reload.&#10;        &lt;/p&gt;&#10;        &lt;a&#10;          className=&quot;App-link&quot;&#10;          href=&quot;https://reactjs.org&quot;&#10;          target=&quot;_blank&quot;&#10;          rel=&quot;noopener noreferrer&quot;&#10;        &gt;&#10;          Learn React&#10;        &lt;/a&gt;&#10;      &lt;/header&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;export default App;&#10;" />
              <option name="updatedContent" value="import React from 'react';&#10;import TodoList from './TodoList';&#10;&#10;function App() {&#10;  return &lt;TodoList /&gt;;&#10;}&#10;&#10;export default App;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/TodoForm.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/TodoForm.tsx" />
              <option name="originalContent" value="import React, { useEffect } from 'react';&#10;import { Button, TextField, Box } from '@mui/material';&#10;import { useForm } from 'react-hook-form';&#10;import { Todo } from './TodoList';&#10;&#10;interface TodoFormProps {&#10;  onSubmit: (data: Omit&lt;Todo, 'id'&gt;, id?: number) =&gt; void;&#10;  editingTodo: Todo | null;&#10;}&#10;&#10;const defaultValues = {&#10;  title: '',&#10;  description: '',&#10;  completed: false,&#10;};&#10;&#10;const TodoForm: React.FC&lt;TodoFormProps&gt; = ({ onSubmit, editingTodo }) =&gt; {&#10;  const { register, handleSubmit, reset, setValue } = useForm&lt;Omit&lt;Todo, 'id'&gt;&gt;({&#10;    defaultValues,&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    if (editingTodo) {&#10;      setValue('title', editingTodo.title);&#10;      setValue('description', editingTodo.description || '');&#10;      setValue('completed', editingTodo.completed);&#10;    } else {&#10;      reset(defaultValues);&#10;    }&#10;  }, [editingTodo, setValue, reset]);&#10;&#10;  const submitHandler = (data: Omit&lt;Todo, 'id'&gt;) =&gt; {&#10;    onSubmit(data, editingTodo?.id);&#10;    reset(defaultValues);&#10;  };&#10;&#10;  return (&#10;    &lt;Box component=&quot;form&quot; onSubmit={handleSubmit(submitHandler)} sx={{ mb: 2, display: 'flex', gap: 1 }}&gt;&#10;      &lt;TextField&#10;        label=&quot;Title&quot;&#10;        variant=&quot;outlined&quot;&#10;        size=&quot;small&quot;&#10;        {...register('title', { required: true })}&#10;        sx={{ flex: 2 }}&#10;      /&gt;&#10;      &lt;TextField&#10;        label=&quot;Description&quot;&#10;        variant=&quot;outlined&quot;&#10;        size=&quot;small&quot;&#10;        {...register('description')}&#10;        sx={{ flex: 3 }}&#10;      /&gt;&#10;      &lt;Button type=&quot;submit&quot; variant=&quot;contained&quot; color=&quot;primary&quot;&gt;&#10;        {editingTodo ? 'Update' : 'Add'}&#10;      &lt;/Button&gt;&#10;    &lt;/Box&gt;&#10;  );&#10;};&#10;&#10;export default TodoForm;&#10;&#10;" />
              <option name="updatedContent" value="import React, { useEffect } from 'react';&#10;import { Button, TextField, Box } from '@mui/material';&#10;import { useForm } from 'react-hook-form';&#10;import { Todo } from './TodoList';&#10;&#10;interface TodoFormProps {&#10;  onSubmit: (data: Omit&lt;Todo, 'id'&gt;, id?: number) =&gt; void;&#10;  editingTodo: Todo | null;&#10;}&#10;&#10;const defaultValues = {&#10;  title: '',&#10;  description: '',&#10;  completed: false,&#10;};&#10;&#10;const TodoForm: React.FC&lt;TodoFormProps&gt; = ({ onSubmit, editingTodo }) =&gt; {&#10;  const { register, handleSubmit, reset, setValue } = useForm&lt;Omit&lt;Todo, 'id'&gt;&gt;({&#10;    defaultValues: defaultValues as Omit&lt;Todo, 'id'&gt;,&#10;  });&#10;&#10;  useEffect(() =&gt; {&#10;    if (editingTodo) {&#10;      setValue('title', editingTodo.title as string);&#10;      setValue('description', editingTodo.description || '');&#10;      setValue('completed', editingTodo.completed);&#10;    } else {&#10;      reset(defaultValues);&#10;    }&#10;  }, [editingTodo, setValue, reset]);&#10;&#10;  const submitHandler = (data: Omit&lt;Todo, 'id'&gt;) =&gt; {&#10;    onSubmit(data, editingTodo?.id);&#10;    reset(defaultValues);&#10;  };&#10;&#10;  return (&#10;    &lt;Box component=&quot;form&quot; onSubmit={handleSubmit(submitHandler)} sx={{ mb: 2, display: 'flex', gap: 1 }}&gt;&#10;      &lt;TextField&#10;        label=&quot;Title&quot;&#10;        variant=&quot;outlined&quot;&#10;        size=&quot;small&quot;&#10;        {...register('title', { required: true })}&#10;        sx={{ flex: 2 }}&#10;      /&gt;&#10;      &lt;TextField&#10;        label=&quot;Description&quot;&#10;        variant=&quot;outlined&quot;&#10;        size=&quot;small&quot;&#10;        {...register('description')}&#10;        sx={{ flex: 3 }}&#10;      /&gt;&#10;      &lt;Button type=&quot;submit&quot; variant=&quot;contained&quot; color=&quot;primary&quot;&gt;&#10;        {editingTodo ? 'Update' : 'Add'}&#10;      &lt;/Button&gt;&#10;    &lt;/Box&gt;&#10;  );&#10;};&#10;&#10;export default TodoForm;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/frontend/src/TodoList.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/TodoList.tsx" />
              <option name="updatedContent" value="import React, { useEffect, useState } from 'react';&#10;import axios from 'axios';&#10;import { Container, Typography, Paper, List, ListItem, ListItemText, IconButton, Checkbox, Box } from '@mui/material';&#10;import DeleteIcon from '@mui/icons-material/Delete';&#10;import EditIcon from '@mui/icons-material/Edit';&#10;import TodoForm from './TodoForm';&#10;&#10;export interface Todo {&#10;  id: number;&#10;  title: string;&#10;  description?: string;&#10;  completed: boolean;&#10;}&#10;&#10;const API_URL = 'http://localhost:8000/todos';&#10;&#10;const TodoList: React.FC = () =&gt; {&#10;  const [todos, setTodos] = useState&lt;Todo[]&gt;([]);&#10;  const [editingTodo, setEditingTodo] = useState&lt;Todo | null&gt;(null);&#10;&#10;  const fetchTodos = async () =&gt; {&#10;    const res = await axios.get(API_URL);&#10;    setTodos(res.data);&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    fetchTodos();&#10;  }, []);&#10;&#10;  const handleDelete = async (id: number) =&gt; {&#10;    await axios.delete(`${API_URL}/${id}`);&#10;    fetchTodos();&#10;  };&#10;&#10;  const handleToggle = async (todo: Todo) =&gt; {&#10;    await axios.put(`${API_URL}/${todo.id}`, { ...todo, completed: !todo.completed });&#10;    fetchTodos();&#10;  };&#10;&#10;  const handleEdit = (todo: Todo) =&gt; {&#10;    setEditingTodo(todo);&#10;  };&#10;&#10;  const handleFormSubmit = async (data: Omit&lt;Todo, 'id'&gt;, id?: number) =&gt; {&#10;    if (id) {&#10;      await axios.put(`${API_URL}/${id}`, data);&#10;    } else {&#10;      await axios.post(API_URL, data);&#10;    }&#10;    setEditingTodo(null);&#10;    fetchTodos();&#10;  };&#10;&#10;  return (&#10;    &lt;Container maxWidth=&quot;sm&quot; sx={{ mt: 4 }}&gt;&#10;      &lt;Paper elevation={3} sx={{ p: 3 }}&gt;&#10;        &lt;Typography variant=&quot;h4&quot; align=&quot;center&quot; gutterBottom&gt;&#10;          Todo List&#10;        &lt;/Typography&gt;&#10;        &lt;TodoForm onSubmit={handleFormSubmit} editingTodo={editingTodo} /&gt;&#10;        &lt;List&gt;&#10;          {todos.map((todo) =&gt; (&#10;            &lt;ListItem&#10;              key={todo.id}&#10;              secondaryAction={&#10;                &lt;Box&gt;&#10;                  &lt;IconButton edge=&quot;end&quot; aria-label=&quot;edit&quot; onClick={() =&gt; handleEdit(todo)}&gt;&#10;                    &lt;EditIcon /&gt;&#10;                  &lt;/IconButton&gt;&#10;                  &lt;IconButton edge=&quot;end&quot; aria-label=&quot;delete&quot; onClick={() =&gt; handleDelete(todo.id)}&gt;&#10;                    &lt;DeleteIcon /&gt;&#10;                  &lt;/IconButton&gt;&#10;                &lt;/Box&gt;&#10;              }&#10;            &gt;&#10;              &lt;Checkbox&#10;                checked={todo.completed}&#10;                onChange={() =&gt; handleToggle(todo)}&#10;                inputProps={{ 'aria-label': 'toggle todo' }}&#10;              /&gt;&#10;              &lt;ListItemText&#10;                primary={todo.title}&#10;                secondary={todo.description}&#10;                sx={{ textDecoration: todo.completed ? 'line-through' : 'none' }}&#10;              /&gt;&#10;            &lt;/ListItem&gt;&#10;          ))}&#10;        &lt;/List&gt;&#10;      &lt;/Paper&gt;&#10;    &lt;/Container&gt;&#10;  );&#10;};&#10;&#10;export default TodoList;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>